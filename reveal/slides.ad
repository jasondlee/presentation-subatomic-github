= Supersonic, Subatomic GitHub
:revealjs_theme: sky
:source-highlighter: highlight.js
:imagesdir: images
:title-slide-background-image: cover.png
:title-slide-transition: zoom
:title-slide-transition-speed: fast
:revealjs_hash: true
:revealjs_center: false
:revealjs_width: "100%"
:revealjs_height: "100%"
:customcss: styles.css

Jason Lee, Red Hat
Principal Software Engineer, Red Hat

== Who Am I?

* Software developer since 1997 (professionally)
* Java Champion
* Principal Software Engineer at Red Hat
** WildFly/EAP
** Undertow
* Book Author - https://www.packtpub.com/application-development/java-9-programming-blueprints[Java 9 Programming Blueprints]
* Blogger - https://jasondl.ee[]

== My Family

image::seine.jpg[Family,,"75%"]

== What we'll cover

* A _brief_ introduction to Quarkus (?)
* GitHub Actions
* GitHub Apps

== Why Java? Why Quarkus?

[%step]
* Why Java?
[%step]
** Mature, battle-tested language
** Immense number of libraries, frameworks, etc.
** Great global community
** It's not Javascript. :)
* Why Quarkus?
[%step]
** Leverages existing Java/JVM knowledge
** Full CDI integration
** Easily unit testable
** Native compilation

== GitHub Actions

* "GitHub Actions is a continuous integration and continuous delivery (CI/CD) platform that allows you to automate your build, test, and deployment pipeline."
* You can chain together actions to make a workflow
* Learn more at https://docs.github.com/en/actions[]

== Create a Quarkus GitHub Action

* Developer docs: https://docs.quarkiverse.io/quarkus-github-action/dev/index.html[]
* Create the action using the Quarkus CLI:
+
[source,bash]
----
quarkus create app \
    -x quarkus-github-action \
    com.steeplesoft:subatomic-github-action:1.0-SNAPSHOT \
    --name="My Quarkus Action" \
    --description="Subatomic GitHub Action" \
    --data=quarkiverse-github-action-codestart.github-repository=jasondlee/subatomic-github-action
----
* You _can_ use Maven if you want. See docs link above.

== Define your action

Your action is a simple annotated Java method:
[source,java]
----
@Action
void action(Commands commands) {
    commands.notice("Hello from Quarkus GitHub Action");
    commands.appendJobSummary(":wave: Hello from Quarkus GitHub Action");
}
----

== Define your action (cont)

[%step]
* If you want more than one action in your library, use `@Action("actionName")`
* CDI injection works. Some built-in objects
** `Command`
** `Inputs`
** `Context`
** `GitHub`

== Test drive your action

[%step]
* Commit your action and push it GitHub
* Give the workflow time to run
* Create a separate repo with a workflow like:
+
[source]
----
jobs:
    build_and_deploy:
        runs-on: ubuntu-latest
        steps:
            - name: Quarkus Action Demo
              uses: jasondlee/presentation-subatomic-github-actions@master
              with:
                github-token: ${{ secrets.GITHUB_TOKEN }}
----

== Test drive your action (cont)

// [%step]
* Any commit to the repo will cause the action to run
* You should see something like this:
+
[cols="1",align="top"]
image::action_notice.png[]
image::action_job_summary.png[]
* You _can_ write integration tests: https://docs.quarkiverse.io/quarkus-github-action/dev/testing.html[]

== GitHub Apps

* "GitHub Apps are tools that extend GitHub's functionality. GitHub Apps can do things on GitHub like open issues, comment on pull requests, and manage projects. They can also do things outside of GitHub based on events that happen on GitHub."
* Steps
[%step]
** Create a playground project
** Register the app with GitHub
** Create a private key
** Install the application in a playground project
** Create the Quarkus app
** Profit

== Register the app with GitHub

* Visit https://github.com/settings/apps/new[]
* Only required fields (for an app of this size)
** Application name
** Homepage URL
** Webhook URL
*** Your app is probably behind a firewall, so we'll need a proxy. More in a minute...

== Register the app with GitHub (cont)

[%step]
* Webhook secret
** Not really needed at this point either, but a good idea
** `ruby -rsecurerandom -e 'puts SecureRandom.hex(20)'`
** Keep a copy of this
* Permissions
** Start with `Read & write` under `Repository Permission` for `Issues` and `Pull request`

== Register the app with GitHub (cont)
* Subscribe to events
** `Issues`
** `Issue comment`
** `Pull request`

== Notes on the Webhook URL
[%step]
* Your app is probably behind a firewall, so we'll need a proxy.
* image:smee.png["Mr. Smee",,500,float="right",aalign="text-left"]
+
Smee to the rescue https://smee.io[]
* Click on `Start a new channel`
* Make a copy of the `Webhook Proxy URL`
* Quarkus GitHub App connects to smee.io automatically

== Final steps on GitHub
[%step]
* Click `Create GitHub App`
** You should see a warning about needing a private key
* Create a private key
** In the `Private keys` section, click on Generate a private key
** Save the `.pem` file
* Install the app
** Click the `Install App` link in the left nav
** Select an account into which to install the application
** Select the playground repository created above

== Create the Quarkus app
[%step]
* Create the application using the Quarkus CLI:
+
[source]
----
quarkus create app \
    -x quarkus-github-app \
    com.steeplesoft:my-github-app \
    --no-code
----
* Initialize the environment:
+
..env
[source]
----
QUARKUS_GITHUB_APP_APP_ID=<the numeric app id>
QUARKUS_GITHUB_APP_APP_NAME=<the name of your app>
QUARKUS_GITHUB_APP_WEBHOOK_PROXY_URL=<your smee.io channel URL>
QUARKUS_GITHUB_APP_WEBHOOK_SECRET=<your webhook secret>
QUARKUS_GITHUB_APP_PRIVATE_KEY=-----BEGIN RSA PRIVATE KEY-----\
                  <your private key>                          \
-----END RSA PRIVATE KEY-----
----
* Fire it up
+
[source]
----
$ quarkus dev
----

== Create your first action

* Simple Java methods with annotated parameters:
[source,java]
----
import java.io.IOException;

import io.quarkiverse.githubapp.event.Issue;
import org.kohsuke.github.GHEventPayload;
import org.kohsuke.github.GHIssue;
import org.kohsuke.github.GHIssueChanges;

public class IssueProcessor {
    void onOpen(@Issue.Opened GHEventPayload.Issue issuePayload) throws IOException {
        issuePayload.getIssue().comment("Hello from my GitHub App");
    }
}
----

== Some Supported Events
[cols="1,1,1",grid="none",stripes="odd",role="mediumfont"]
|===
|GitHub Event Type |Events |Payload

| issues
| @Issue.Assigned, @Issue.Closed, @Issue.Deleted, @Issue.Demilestoned, @Issue.Edited, @Issue.Labeled, @Issue.Locked, @Issue.Milestoned, @Issue.Opened, @Issue.Pinned, @Issue.Reopened, @Issue.Transferred, @Issue.Unassigned, @Issue.Unlabeled, @Issue.Unlocked, @Issue.Unpinned
| GHEventPayload.Issue

| issue_comment
| @IssueComment.Created, @IssueComment.Deleted, @IssueComment.Edited
| GHEventPayload.IssueComment

| pull_request
| @PullRequest.Assigned, @PullRequest.Closed, @PullRequest.Edited, @PullRequest.Labeled, @PullRequest.Locked, @PullRequest.Opened, @PullRequest.ReadyForReview, @PullRequest.Reopened, @PullRequest.ReviewRequested, @PullRequest.ReviewRequestRemoved, @PullRequest.Synchronize, @PullRequest.Unassigned, @PullRequest.Unlabeled, @PullRequest.Unlocked
| GHEventPayload.PullRequest

| release
| @Release.Created, @Release.Deleted, @Release.Edited, @Release.Prereleased, @Release.Published, @Release.Released, @Release.Unpublished
| GHEventPayload.Release

|===

== Configuration

* Your app can be configured per-repository (e.g., `.github/my-config.yml`)
* Formats supported
** JSON
** YAML
** Text
* Automatic deserialization and injection supported

== Testing

[%step]
* You can certainly do manual testing
* JUnit is supported, but you need something to trigger the event listener
* http://localhost:8080/replay/[Replay UI] to the rescue
* Save the results of a manual test to a JSON file
* Load the file and mock the event from your test


[.notes]
--
* tell anecdote
* make a pointmeme
--
